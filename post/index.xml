<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Neo&#39;s Blog</title>
    <link>https://neowyj.github.io/post/</link>
    <description>Recent content in Posts on Neo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 20 Sep 2020 20:16:56 +0000</lastBuildDate><atom:link href="https://neowyj.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AssetBundle详解</title>
      <link>https://neowyj.github.io/post/assetbundle%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 20 Sep 2020 20:16:56 +0000</pubDate>
      
      <guid>https://neowyj.github.io/post/assetbundle%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;h4 id=&#34;ab包简介&#34;&gt;AB包简介&lt;/h4&gt;
&lt;p&gt;AssetBundle（简称AB包）是一个资源压缩包，包括模型、贴图、预制体、声音甚至整个游戏场景，它可以在游戏运行时加载。AssetBundle能够自动处理资源的依赖关系，比如一个AB包的材质能够引用另一个AB包中的贴图。通过将游戏资源打包成AB包并上传服务器，这样可以避免所有资源都打包进APK，从而减少APK的大小，直到在游戏的运行过程中再按需加载AB包资源。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>深入分析CSharp反射</title>
      <link>https://neowyj.github.io/post/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90csharp%E5%8F%8D%E5%B0%84/</link>
      <pubDate>Mon, 13 Jul 2020 15:48:20 +0000</pubDate>
      
      <guid>https://neowyj.github.io/post/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90csharp%E5%8F%8D%E5%B0%84/</guid>
      <description>&lt;p&gt;反射Reflection是.NET平台在运行时获取类型（包括类、接口、结构体、委托和枚举等类型）信息的重要机制，即从对象外部获取内部的信息，包括字段、属性、方法、构造函数和特性等。我们可以使用反射动态获取类型的信息，并利用这些信息动态创建对应类型的对象。反射的优点：提高程序的灵活性和扩展性，降低程序的耦合性，动态实例化对象。反射的缺点：性能消耗比直接获取类型信息要大，反射代码比普通代码复杂，维护性差。因此普通程序不建议使用反射，需要构建灵活性和扩展性较高的系统框架时才使用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>深入理解xLua热更新原理</title>
      <link>https://neowyj.github.io/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3xlua%E7%83%AD%E6%9B%B4%E6%96%B0%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://neowyj.github.io/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3xlua%E7%83%AD%E6%9B%B4%E6%96%B0%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;h2 id=&#34;热更新简介&#34;&gt;热更新简介&lt;/h2&gt;
&lt;p&gt;热更新是指在不需要重新编译打包游戏的情况下，在线更新游戏中的一些非核心代码和资源，比如活动运营和打补丁。热更新分为资源热更新和代码热更新两种，代码热更新实际上也是把代码当成资源的一种热更新，但通常所说的热更新一般是指代码热更新。资源热更新主要通过AssetBundle来实现，在Unity编辑器内为游戏中所用到的资源指定AB包的名称和后缀，然后进行打包并上传服务器，待游戏运行时动态加载服务器上的AB资源包。代码热更新主要包括Lua热更新、ILRuntime热更新和C#直接反射热更新等。由于ILRuntime热更新还不成熟可能存在一些坑，而C#直接反射热更新又不支持IOS平台，因此目前大多采用更成熟的、没有平台限制的Lua热更新方案。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A*算法</title>
      <link>https://neowyj.github.io/post/a%E6%98%9F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Fri, 01 Nov 2019 18:04:43 +0000</pubDate>
      
      <guid>https://neowyj.github.io/post/a%E6%98%9F%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h4 id=&#34;算法简介&#34;&gt;算法简介&lt;/h4&gt;
&lt;p&gt;A星搜索算法（A* search algorithm），简称A星算法，是一种启发式搜索算法，用于求解图中两个节点之间的最短路径及其长度。常用于游戏中NPC的移动计算和求地图中两点的实际最短路径。A星算法是Dijkstra算法的升级版，但Dijkstra算法属于盲目搜索，每次都需要访问到所有结点的路径并找出最短的一条路径，然后以该最短路径为基础更新到其他结点的路径，不断重复直到找到所有的最短路径结点。当图中的结点很多时，如果采用Dijkstra算法寻找最短路径，产生的计算量将会非常大，而采用A星算法产生的计算量将会远小于Dijkstra算法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>排序</title>
      <link>https://neowyj.github.io/post/%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 13 Oct 2019 22:04:41 +0000</pubDate>
      
      <guid>https://neowyj.github.io/post/%E6%8E%92%E5%BA%8F/</guid>
      <description>&lt;h4 id=&#34;排序概述&#34;&gt;&lt;strong&gt;排序概述&lt;/strong&gt;&lt;/h4&gt;
&lt;h6 id=&#34;基本概念&#34;&gt;&lt;strong&gt;基本概念&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;排序&lt;/strong&gt;：重新排列表中元素，使其按关键字递增或递减的过程，一般是递增的。排序算法是数据结构中最基础的算法之一。&lt;strong&gt;排序算法的稳定性：&lt;strong&gt;如果a=b且排序前a在b的前面，使用某一排序算法排序后a依然在b的前面，就称这个排序算法是&lt;/strong&gt;稳定&lt;/strong&gt;的。反之，则称该排序算法是&lt;strong&gt;不稳定&lt;/strong&gt;的。注意，算法是否具有稳定性并不能衡量一个算法的优劣，它只是对一个算法的性质进行描述。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>查找</title>
      <link>https://neowyj.github.io/post/%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Thu, 26 Sep 2019 22:04:41 +0000</pubDate>
      
      <guid>https://neowyj.github.io/post/%E6%9F%A5%E6%89%BE/</guid>
      <description>&lt;h4 id=&#34;基本概念&#34;&gt;基本概念&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;查找&lt;/strong&gt;：在数据集合中寻找满足某种条件的数据元素的过程称为查找。&lt;strong&gt;查找表&lt;/strong&gt;：用于查找的数据结合称为查找表，它是由同一类型的数据元素（记录）组成，可以是一个数组或链表等数据类型。&lt;strong&gt;静态查找表&lt;/strong&gt;：只用于查找某个元素和检索满足某个条件的数据元素的各种属性的查找表称为静态查找表。&lt;strong&gt;动态查找表&lt;/strong&gt;：在静态查找表基础上，需要动态地插入和删除元素的查找表称为动态查找表。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dijkstra算法及堆优化</title>
      <link>https://neowyj.github.io/post/dijkstra%E7%AE%97%E6%B3%95%E5%8F%8A%E5%A0%86%E4%BC%98%E5%8C%96/</link>
      <pubDate>Tue, 17 Sep 2019 17:00:16 +0800</pubDate>
      
      <guid>https://neowyj.github.io/post/dijkstra%E7%AE%97%E6%B3%95%E5%8F%8A%E5%A0%86%E4%BC%98%E5%8C%96/</guid>
      <description>&lt;h4 id=&#34;简介&#34;&gt;简介&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Dijkstra&lt;/strong&gt;（迪杰斯特拉）算法主要用于求解&lt;strong&gt;非负权图&lt;/strong&gt;中单源最短路径问题，即求一个顶点到图中其他顶点之间的最短路径。对于负权图的单源路径问题，一般采用&lt;strong&gt;Bellman–Ford&lt;/strong&gt;（贝尔曼-福特）算法进行求解。对于非负权图，Dijkstra算法是目前已知的最快的单源路径算法，该算法常用于路由算法或者作为其他图算法的子模块。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unity性能优化入门</title>
      <link>https://neowyj.github.io/post/unity%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sun, 18 Aug 2019 13:46:09 +0000</pubDate>
      
      <guid>https://neowyj.github.io/post/unity%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%85%A5%E9%97%A8/</guid>
      <description>&lt;h4 id=&#34;优化前提&#34;&gt;优化前提&lt;/h4&gt;
&lt;p&gt;Unity开发的游戏之所以比利用原生API开发的游戏包大，是因为Unity游戏包里有一个Mono虚拟机，游戏通过Mono虚拟机实现跨平台运行。在虚拟机上运行，游戏运行变卡变慢。因此，我们必须学会Unity性能优化，这样才能保证游戏的开发效率和游戏性能。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>栈和队列</title>
      <link>https://neowyj.github.io/post/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</link>
      <pubDate>Sat, 20 Jul 2019 22:04:41 +0000</pubDate>
      
      <guid>https://neowyj.github.io/post/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</guid>
      <description>&lt;h2 id=&#34;栈&#34;&gt;栈&lt;/h2&gt;
&lt;h4 id=&#34;简介&#34;&gt;简介&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://wx4.sinaimg.cn/large/006WUoxdgy1g7sxht6f0oj30ba08wju0.jpg&#34; style=&#34;zoom:80%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;栈&lt;/strong&gt;（Stack），又称堆栈，是只允许在一端进行插入和删除的线性表，即栈是受限线性表。允许插入和删除的一端称为&lt;strong&gt;栈顶&lt;/strong&gt;（Top），不允许插入和删除的一端称为&lt;strong&gt;栈底&lt;/strong&gt;（Bottom），栈底是固定的。栈的操作特点是后进先出&lt;strong&gt;LIFO&lt;/strong&gt;（Last In First Out），故又称后进先出的线性表。&lt;strong&gt;空栈&lt;/strong&gt;是不含任何元素的栈。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>装饰器模式</title>
      <link>https://neowyj.github.io/post/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 17 Jul 2019 15:33:13 +0000</pubDate>
      
      <guid>https://neowyj.github.io/post/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h4 id=&#34;模式简介&#34;&gt;模式简介&lt;/h4&gt;
&lt;p&gt;装饰器模式（Decorator Pattern）：在不改变现有对象结构的情况下，动态地给对象增加一些额外的职责，即给现有对象增加一些新的功能。装饰器对客户是透明的，要让客户感受不到该对象被装饰过。因此，装饰器必须要实现被装饰对象的接口方法，从而保证对象的用法不变，不然对象的结构就被改变了。装饰器模式别名又称包装器（Wrapper），与适配器模式别名相同，它属于对象结构型模式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>链表</title>
      <link>https://neowyj.github.io/post/%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Thu, 27 Jun 2019 22:04:41 +0000</pubDate>
      
      <guid>https://neowyj.github.io/post/%E9%93%BE%E8%A1%A8/</guid>
      <description>&lt;h4 id=&#34;简介&#34;&gt;简介&lt;/h4&gt;
&lt;p&gt;链表（LinkedList）是一种物理存储结构上非连续的线性表结构，数据元素的逻辑顺序通过链表中的指针链接次序来实现。实际上，链表就是线性表的&lt;strong&gt;链式存储结构&lt;/strong&gt;。链表是由一系列结点组成，链表中每一个数据元素表示一个节点，节点可以在运行时动态生成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>数组</title>
      <link>https://neowyj.github.io/post/%E6%95%B0%E7%BB%84/</link>
      <pubDate>Thu, 20 Jun 2019 22:04:41 +0000</pubDate>
      
      <guid>https://neowyj.github.io/post/%E6%95%B0%E7%BB%84/</guid>
      <description>&lt;h4 id=&#34;简介&#34;&gt;简介&lt;/h4&gt;
&lt;p&gt;数组（Array）是由相同类型的元素的集合所组成的数据结构。数组采用一块连续的内存空间来存储数据，利用数组下标索引可以随机存取对应的元素。数组元素的类型除了int、float、double和char等基本类型，还可以是类、枚举和结构体等复杂类型。借助数组可以实现线性表的&lt;strong&gt;顺序存储结构&lt;/strong&gt;（即顺序表）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>算法效率</title>
      <link>https://neowyj.github.io/post/%E7%AE%97%E6%B3%95%E6%95%88%E7%8E%87/</link>
      <pubDate>Sun, 26 May 2019 22:04:41 +0000</pubDate>
      
      <guid>https://neowyj.github.io/post/%E7%AE%97%E6%B3%95%E6%95%88%E7%8E%87/</guid>
      <description>&lt;h4 id=&#34;序言&#34;&gt;序言&lt;/h4&gt;
&lt;p&gt;掌握常用数据结构和算法是每一位程序员最基本的能力之一。在软件开发领域，**“数据结构+算法=程序”**是大多数开发者的共识，这足以说明数据结构和算法的重要性。数据结构和算法不受编程语言限制，绝大多数编程语言都可以实现大部分的数据结构和算法。掌握常用数据结构和算法可以使我们能够高效地解决一些特定场景的复杂问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>面向对象编程及其设计原则</title>
      <link>https://neowyj.github.io/post/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%8F%8A%E5%85%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</link>
      <pubDate>Sat, 20 Apr 2019 15:55:58 +0000</pubDate>
      
      <guid>https://neowyj.github.io/post/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%8F%8A%E5%85%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</guid>
      <description>&lt;p&gt;面向对象编程（Object Oriented Programming），简称OOP，是一种程序设计思想。OOP程序的基本单位是对象，具有相同数据和操作的对象集合称为类。类是对象的抽象表示，对象是类的实例。尽管近年来函数式编程的呼声越来越高，但不可否认的是OOP在大型软件系统和游戏开发等领域依然是最广泛最有效的编程范式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>探索Niantic真实世界平台</title>
      <link>https://neowyj.github.io/post/%E6%8E%A2%E7%B4%A2niantic%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E5%B9%B3%E5%8F%B0/</link>
      <pubDate>Wed, 10 Apr 2019 17:23:50 +0000</pubDate>
      
      <guid>https://neowyj.github.io/post/%E6%8E%A2%E7%B4%A2niantic%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E5%B9%B3%E5%8F%B0/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://roadtovrlive-5ea0.kxcdn.com/wp-content/uploads/2017/11/pokemon-go-niantic-logo.jpg&#34; alt=&#34;&#34;&gt;当我们创建Niantic时，我们为公司的使命设立了三个核心价值：探索、成长和真实世界的社交互动。但是，在最疯狂的梦想中，我们没想到我们的AR体验会给我们的玩家和他们所生活的社区带来积极的影响。我们很幸运能够将对技术和游戏的热情结合起来，为所有年龄段的人创造创新型的体验。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unity脚本CSharp入门</title>
      <link>https://neowyj.github.io/post/unity%E8%84%9A%E6%9C%ACcsharp%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sat, 23 Mar 2019 17:00:37 +0000</pubDate>
      
      <guid>https://neowyj.github.io/post/unity%E8%84%9A%E6%9C%ACcsharp%E5%85%A5%E9%97%A8/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.mikedane.com/programming-languages/csharp/introduction.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;C#是一门由微软公司开发的面向对象语言。首先声明，C#并不是一门动态脚本语言。C#与JAVA和C++很相似，具备面向对象语言大多数特性，如类、对象、继承、重载和多态等。由于微软公司早期的封闭战略，C#语言只能在微软生态里运行。大部分开发者无法忍受微软公司的傲慢，纷纷放弃C#转而选择了JAVA语言，C#从此逐渐开始没落。直到新任CEO纳德拉上台后，微软开始大刀阔斧的改革，开始开源并支持跨平台。再加上.NET框架的性能优化和提升，C#语言正在焕发新的生机。尽管C#影响力大不如前，但在Unity应用领域，C#依然是绝大多数开发者的首选编程语言。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>为什么学编程要从Web开始？</title>
      <link>https://neowyj.github.io/post/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E7%BC%96%E7%A8%8B%E8%A6%81%E4%BB%8Eweb%E5%BC%80%E5%A7%8B/</link>
      <pubDate>Sun, 30 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://neowyj.github.io/post/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E7%BC%96%E7%A8%8B%E8%A6%81%E4%BB%8Eweb%E5%BC%80%E5%A7%8B/</guid>
      <description>&lt;p&gt;本文已独家授权给刘欣老师的《码农翻身》公众号，谢绝任何媒体和公众号转载，违者必究。&lt;/p&gt;
&lt;p&gt;大多数大学生接触的第一门编程课便是C语言，这对于一个完全不懂计算机的人可能是噩梦。不少人初次上C语言课都会被指针绕得晕头转向，然而大部分编程工作并不需要你关心指针的使用。此外，C语言对可视化编程并不友好，用C语言编写图形化界面十分繁琐。在这种情况下，很多大学生都会问C语言能做什么？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>哈佛幸福公开课笔记（下）</title>
      <link>https://neowyj.github.io/post/%E5%93%88%E4%BD%9B%E5%B9%B8%E7%A6%8F%E5%85%AC%E5%BC%80%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B8%8B/</link>
      <pubDate>Thu, 19 Oct 2017 10:34:26 +0000</pubDate>
      
      <guid>https://neowyj.github.io/post/%E5%93%88%E4%BD%9B%E5%B9%B8%E7%A6%8F%E5%85%AC%E5%BC%80%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B8%8B/</guid>
      <description>&lt;img src=&#34;http://wx3.sinaimg.cn/large/006WUoxdly1fkndhljxs8j31kw12sx6p.jpg&#34;&gt;
&lt;p&gt;这门课治愈了很多人的抑郁症，也改变了很多人的人生。或许人人都应该学一点积极心理学。与成功学相反，积极心理学具有实质性的数据理论支持。我的笔记无法一一俱到，强烈推荐看完笔记后再去看一遍课程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>哈佛幸福公开课笔记（上）</title>
      <link>https://neowyj.github.io/post/%E5%93%88%E4%BD%9B%E5%B9%B8%E7%A6%8F%E5%85%AC%E5%BC%80%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B8%8A/</link>
      <pubDate>Mon, 16 Oct 2017 10:40:50 +0000</pubDate>
      
      <guid>https://neowyj.github.io/post/%E5%93%88%E4%BD%9B%E5%B9%B8%E7%A6%8F%E5%85%AC%E5%BC%80%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B8%8A/</guid>
      <description>&lt;img src=&#34;http://wx2.sinaimg.cn/large/006WUoxdly1fknb4oe33lj318g0tsgvh.jpg&#34;&gt;
&lt;p&gt;在看哈佛大学幸福公开课之前，我一直在思考成功学和积极心理学之间的区别是什么？现在我明白了，二者有相似之处，但也有本质的不同。在成功学眼里，似乎只有“出任CEO，赢娶白富美，走向人生巅峰”才是成功，而积极心理学的意义是如何让人更加快乐。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>为什么搭建这个博客？</title>
      <link>https://neowyj.github.io/post/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%90%AD%E5%BB%BA%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sat, 16 Sep 2017 16:32:17 +0000</pubDate>
      
      <guid>https://neowyj.github.io/post/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%90%AD%E5%BB%BA%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2/</guid>
      <description>&lt;p&gt;十年前写博客是一种流行，那时每个人都想有自己的思想交流空间。现在仅有一少部分人还在坚持着写博客，也许在他们眼里，写博客已经变成了一种情怀。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git精华</title>
      <link>https://neowyj.github.io/post/git%E7%B2%BE%E5%8D%8E/</link>
      <pubDate>Sun, 03 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://neowyj.github.io/post/git%E7%B2%BE%E5%8D%8E/</guid>
      <description>&lt;p&gt;以前一般用CVS或者SVN等集中式版本控制系统，现在使用git分布式版本控制系统。集中式版本控制系统需要有一台中央服务器，工作时到中央服务器下载代码，工作完就推送到中央服务器。而且这需要联网，一旦没有网络则会导致无法工作。而git是分布式版本控制系统，每人的电脑上都有一个完整的代码库。联网只是为电脑之间交换修改提供了方便。因此，需要一台中央服务器，为大家提供交换方便。没有这台“中央服务器”，大家一样能进行工作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我在质疑我的学习方法</title>
      <link>https://neowyj.github.io/post/%E6%88%91%E5%9C%A8%E8%B4%A8%E7%96%91%E6%88%91%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 19 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://neowyj.github.io/post/%E6%88%91%E5%9C%A8%E8%B4%A8%E7%96%91%E6%88%91%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;p&gt;最近几天把《JavaScript高级程序设计》看完了，而且一个demo不差的把书中的案例全部敲了一遍。敲完以后，觉得成就感爆棚，自己坚持把一本技术书的每一个知识点看完了而且理解了。这几天开始review，发现效果还好，没有遗漏太多。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
